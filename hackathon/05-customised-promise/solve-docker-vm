#!/bin/sh
#
# This script runs when the platform solve the challenge.
#
# The platform determines if the script was successful using the exit code of this
# script. If the exit code is not 0, the script fails. 
#

echo "This is the solve script"

yq eval -i '.spec.api.spec.versions[0].schema.openAPIV3Schema.properties.spec.properties.env = {
  "description": "The environment variables for the container",
  "type": "object",
  "additionalProperties": {
  "type": "string"
  }
}' ${HOME}/hackathon/app-as-a-service/promise.yaml

yq eval -i '.spec.workflows.resource.configure[0].spec.containers += [{
  "name": "environment-vars-configure",
  "image": "ghcr.io/syntasso/kratix-marketplace/app-as-a-service-configure-pipeline:v0.2.0",
  "command": ["environment-vars-configure"]
}]' ${HOME}/hackathon/app-as-a-service/promise.yaml

kubectl --context $PLATFORM apply -f ${HOME}/hackathon/app-as-a-service/promise.yaml


cat << EOF | kubectl apply --context $PLATFORM -f -
apiVersion: marketplace.kratix.io/v1
kind: app
metadata:
  name: todoer
  namespace: default
spec:
  name: todoer
  image: syntasso/sample-todo-app:v1.0.0
  dbDriver: postgresql
  service:
    port: 8080
  env:
    VERSION: 1.12.1
EOF

kubectl wait --context kind-platform --for=create job -l kratix.io/resource-name=todoer
kubectl wait --context kind-platform --for=condition=complete job -l kratix.io/resource-name=todoer

touch $HOME/kubecon/bespoke
