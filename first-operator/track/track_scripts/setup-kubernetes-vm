#!/bin/bash

set -euxoH pipefail

BASH_RC=/root/.bashrc
CODE_SERVER_VERSION=4.7.0
GO_VERSION=1.18.6
HOME_DIR=/root/demo
SOLUTIONS_DIR=/root/instruqt-kubecon/support
KUBEBUILDER_VERSION=3.6.0

# Wait for the Instruqt host bootstrap to finish
until [ -f /opt/instruqt/bootstrap/host-bootstrap-completed ]
do
  sleep 1
done

# Wait for the Kubernetes API server to become available
while ! curl --silent --fail --output /dev/null http://localhost:8001/api 
do
  sleep 1 
done

# Retrieve solutions for all stage
git clone \
  --depth 1  \
  --filter=blob:none  \
  --sparse \
  https://github.com/syntasso/instruqt-kubecon.git
cd instruqt-kubecon/
git sparse-checkout set support
cd ~

# Make commandline more useable for experienced k8s users

## Enable bash completion for kubectl
echo "source /usr/share/bash-completion/bash_completion" >> ${BASH_RC}

## Set zsh plugin helpful aliases (https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/kubectl/README.md)
echo "complete -F __start_kubectl k" >> ${BASH_RC}
cat ${SOLUTIONS_DIR}/track/bash_aliases >> /root/.bash_aliases

# Setup home dir for the workshop
mkdir -p ${HOME_DIR}
echo "# Create your namespace yaml here" > ${HOME_DIR}/.example-namespace.yaml
echo "export DEMO_HOME=${HOME_DIR}" >> ${BASH_RC}
echo "export SOLUTIONS_DIR=${SOLUTIONS_DIR}" >> ${BASH_RC}

# Install the necessary Golang version onto the PATH
rm -rf /usr/bin/go
curl -L -O https://go.dev/dl/go${GO_VERSION}.linux-amd64.tar.gz
tar -C /usr/local/ -xzf go${GO_VERSION}.linux-amd64.tar.gz > /dev/null 2>&1

## Add Golang to path
echo "export PATH=$PATH:/usr/local/go/bin" >> ${BASH_RC}
source ${BASH_RC} > /dev/null 2>&1

## Install gopls for extension
go install -v golang.org/x/tools/gopls@latest > /dev/null 2>&1
go install golang.org/x/tools/cmd/goimports@latest

# Download kubebuilder and install locally (https://book.kubebuilder.io/quick-start.html#installation)
curl -L -o kubebuilder https://github.com/kubernetes-sigs/kubebuilder/releases/download/v${KUBEBUILDER_VERSION}/kubebuilder_$(go env GOOS)_$(go env GOARCH)
chmod +x kubebuilder && mv kubebuilder /usr/local/go/bin/
kubebuilder completion bash > /dev/null 2>&1

# Install and run Code server on the Kubernetes node

## Download and install Code server
curl -fOL https://github.com/coder/code-server/releases/download/v$CODE_SERVER_VERSION/code-server_${CODE_SERVER_VERSION}_amd64.deb
dpkg -i code-server_${CODE_SERVER_VERSION}_amd64.deb

## Create Code Server startup script

### code-server config
CODE_SERVER_PATH=/root/.local/share/code-server
mkdir -p ${CODE_SERVER_PATH}/User
echo '
{
  "editor.tabSize": 2,

  "extensions.autoUpdate": false,
  "extensions.autoCheckUpdates": false,

  // Removing autosave as it does not properly run goimports
  "files.autoSave": "off"
  // "files.autoSave": "afterDelay",
  // "files.autoSaveDelay": 10,
  
  "go.formatTool": "goimports",

  "redhat.telemetry.enabled": false,

  "security.workspace.trust.startupPrompt": "never",
  "security.workspace.trust.enabled": false,
  "security.workspace.trust.banner": "never",
  "security.workspace.trust.emptyWindow": false,
  "security.workspace.trust.untrustedFiles": "open",

  "update.showReleaseNotes": false,

  "workbench.colorTheme": "Default Dark+"
}
' > ${CODE_SERVER_PATH}/User/settings.json

### code-server service
echo "
[Unit]
Description=Code Server
After=network.target
StartLimitIntervalSec=0

[Service]
Type=simple
Restart=always
RestartSec=1
User=root
ExecStart=/usr/bin/code-server --host 0.0.0.0 --port 8443 --cert --auth none ${DEMO_HOME}

[Install]
WantedBy=multi-user.target
" > /etc/systemd/system/code-server.service

### Start Code Server
systemctl enable code-server
systemctl start code-server


## Install Code server extentions

code-server --install-extension ${SOLUTIONS_DIR}/track/go-0.35.2.vsix
code-server --install-extension ${SOLUTIONS_DIR}/track/yaml-1.10.1-19523.vsix